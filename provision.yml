---
- name: Provision ec2 instances based on the environment
  hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - vars/dev-environment.yml
    - vars/aws-creds.yml

  tasks:

  - name: Create required security groups
    ec2_group:
      name: "{{ item.name }}"
      description: "{{ item.desc }}"
      rules: "{{ item.rules }}"
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
    with_items: security_groups

  - name: Launch instances
    ec2: 
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ item.keypair }}"
      group: "{{ item.group }}"
      instance_type: "{{ item.instance_type }}"
      image: "{{ item.image }}"
      instance_tags: "{{ item.instance_tags }}"
      exact_count: "{{ item.exact_count }}"
      count_tag: "{{ item.count_tag }}"
      wait: yes
      wait_timeout: 500
    with_items: ec2_instances
    register: ec2_result

  - name: output the IP
    debug: msg="Allocated IP inside the VPC is {{ item }}"
    with_items: ec2_result.results

  - name: wait for WinRM to answer on all hosts
    wait_for:
      port: 5986
      host: "{{ item.tagged_instances[0].public_ip }}"
      timeout: 600
    with_items: "{{ ec2_result.results|default([]) }}"

  - name: add hosts to groups
    add_host:
      name: "win-temp-{{ item.tagged_instances[0].id }}"
      ansible_host: "{{ item.tagged_instances[0].public_ip }}"
      groups: win
    changed_when: false
    with_items: "{{ ec2_result.results|default([]) }}"

- name: web app setup
  hosts: win
  gather_facts: no
  vars_files: [ "vars/aws-creds.yml" ]
  tasks:

  - name: ensure IIS and ASP.NET are installed
    win_feature:
      name: AS-Web-Support

  - name: Download ODAC
    win_get_url:
      url: 'https://github.com/sarlindo/odac/releases/download/v12.1.0/ODAC121024_x64.zip'
      dest: 'c:\users\administrator\appdata\local\temp\ODAC121024_x64.zip'

  - name: Unzip ODAC zip file
    win_unzip:
      src: C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64.zip
      dest: C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64
      creates: C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64

  - name: copy ODAC response file
    win_copy: src=./files/odacclient.rsp dest=C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64

  - name: Check to see if ODAC is installed
    win_stat: path='C:\oracle\client\product\12.1.0\client_1'
    register: odac_installed

  - name: Install ODAC
    raw: 'C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64\setup.exe -waitforcompletion -noconsole -silent -responseFile C:\Users\Administrator\AppData\Local\Temp\ODAC121024_x64\odacclient.rsp'
    when: not odac_installed.stat.exists

  - name: Check to see if ODAC is installed and keep looping
    win_stat: path='C:\oracle\client\product\12.1.0\client_1'
    register: odac_installed
    until: odac_installed.stat.exists
    retries: 25
    delay: 10
    when: not odac_installed.stat.exists

  - name: Install WebPI
    win_package:
      path="https://github.com/sarlindo/WebPI/releases/download/v5.0/WebPlatformInstaller_amd64_en-US.msi"
      Product_Id="{4D84C195-86F0-4B34-8FDE-4A17EB41306A}"
      Arguments="/quiet"

  - name: Install Web Deploy
    win_webpicmd:
      name: WDeploy

  - name: Download link star webapp
    win_get_url:
      url: 'https://github.com/sarlindo/linkstarasp/releases/download/v1.0/linkstarasp.zip'
      dest: 'c:\users\administrator\appdata\local\temp\linkstarasp.zip'

  - name: Unzip linkstar app zip file
    win_unzip:
      src: c:\users\administrator\appdata\local\temp\linkstarasp.zip
      dest: C:\app\sarlindo
      creates: C:\app\sarlindo\linkstarasp

  - name: Stop Default site
    win_iis_website:
      name: "Default Web Site"
      state: stopped

  - name: Remove Default site
    win_iis_website:
      name: "Default Web Site"
      state: absent

  - name: LinkStar IIS site 
    win_iis_website: 
      name: "linkstarasp"
      state: started
      port: 80
      physical_path: 'c:\app\sarlindo\linkstarasp'
      parameters: 'logfile.directory:c:\app\sarlindo\linkstarasp\logs'
    register: linkstarwebsite

  - name: restart windows
    raw: 'powershell restart-computer -Force'

  - name: wait for windows system reboot
    local_action:
        module: wait_for
        port: 80
        host: "{{ ansible_host }}"
        timeout: 600
        delay: 30
